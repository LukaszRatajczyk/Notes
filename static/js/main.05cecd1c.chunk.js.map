{"version":3,"sources":["MyForm.js","Card.js","Header.js","Components/notesData.js","App.js","serviceWorker.js","index.js"],"names":["MyForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","noteValue","SaveText","bind","assertThisInitialized","HandleChange","e","props","addNote","setState","textareaValue","target","value","react_default","a","createElement","className","autoFocus","rows","cols","placeholder","onBlur","onChange","React","Component","Card","editable","index","setEditable","text","deleteNote","_this2","form","cardText","Icon_default","onClick","style","display","Header","src","height","marginTop","notesData","App","notes","ids","input","tmpNote","note","id","unshift","element","splice","newNotesReact","map","src_Card","indexOf","src_Header","src_MyForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05cecd1c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport Card from \"./Card\";\r\n\r\nclass MyForm extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      noteValue: \"\"\r\n    };\r\n    this.SaveText = this.SaveText.bind(this);\r\n    this.HandleChange = this.HandleChange.bind(this);\r\n  }\r\n\r\n  SaveText(e) {\r\n    if (this.state.noteValue) {\r\n      this.props.addNote(this.state.noteValue);\r\n      this.setState({ noteValue: \"\" });\r\n    }\r\n  }\r\n  HandleChange(e) {\r\n    const textareaValue = e.target.value;\r\n    this.setState({\r\n      noteValue: textareaValue\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <textarea\r\n          autoFocus=\"true\"\r\n          rows=\"8\"\r\n          cols=\"40\"\r\n          value={this.state.noteValue}\r\n          placeholder=\"Dodaj notatkę...\"\r\n          onBlur={this.SaveText}\r\n          onChange={this.HandleChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyForm;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport MyForm from \"./MyForm\";\r\n\r\nclass Card extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      noteValue: \"\",\r\n      editable: false,\r\n      index: null\r\n    };\r\n    this.setEditable = this.setEditable.bind(this);\r\n    this.HandleChange = this.HandleChange.bind(this);\r\n    this.SaveText = this.SaveText.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.setState({\r\n      noteValue: this.props.text,\r\n      index: this.props.index\r\n    });\r\n  }\r\n\r\n  setEditable(value) {\r\n    this.setState({\r\n      editable: value\r\n    });\r\n    if (value) {\r\n      this.setState({\r\n        noteValue: this.props.text\r\n      });\r\n    }\r\n  }\r\n  HandleChange(e) {\r\n    const textareaValue = e.target.value;\r\n    this.setState({\r\n      noteValue: textareaValue\r\n    });\r\n  }\r\n  SaveText(e) {\r\n    this.setEditable(false);\r\n\r\n    if (this.state.noteValue) {\r\n      this.props.deleteNote(this.state.index);\r\n      this.props.addNote(this.state.noteValue);\r\n    } else {\r\n      this.props.deleteNote(this.state.index);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const form = (\r\n      <textarea\r\n        rows=\"8\"\r\n        cols=\"40\"\r\n        autoFocus=\"true\"\r\n        value={this.state.noteValue}\r\n        placeholder=\"Dodaj notatkę...\"\r\n        onBlur={this.SaveText}\r\n        onChange={this.HandleChange}\r\n      />\r\n    );\r\n    const cardText = (\r\n      <div>\r\n        <Icon\r\n          onClick={() => {\r\n            this.props.deleteNote(this.state.index);\r\n          }}\r\n        >\r\n          delete\r\n        </Icon>\r\n        <p\r\n          onClick={() => {\r\n            this.setEditable(true);\r\n          }}\r\n        >\r\n          {this.props.text}\r\n        </p>\r\n      </div>\r\n    );\r\n    if (this.state.editable) {\r\n      return (\r\n        <div\r\n          className=\"card\"\r\n          style={{\r\n            display: !this.props.text && \"none\"\r\n          }}\r\n        >\r\n          {form}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className=\"card\"\r\n          style={{\r\n            display: !this.props.text && \"none\"\r\n          }}\r\n        >\r\n          {cardText}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction Header() {\r\n  const logostyle = {\r\n    height: \"16px\",\r\n    marginTop: \"24px\"\r\n  };\r\n  return (\r\n    <div className=\"myheader\">\r\n      <img src=\"https://ahola.pl/style/ahola_wave_y.svg\" style={logostyle} />\r\n      <h2>Notes</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","const notesData = [];\r\n\r\nexport default notesData;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Card from \"./Card\";\r\nimport MyForm from \"./MyForm\";\r\nimport Header from \"./Header\";\r\nimport AirTable from \"airtable\";\r\nimport axios from \"axios\";\r\n//import Counter from \"./Components/Counter\";\r\n//import Conditional from \"./Components/Conditional\";\r\nimport notesData from \"./Components/notesData\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      notes: notesData,\r\n      ids: 0\r\n      //  notesAirTable: []\r\n    };\r\n    this.addNote = this.addNote.bind(this);\r\n    //  this.refreshData = this.refreshData.bind(this);\r\n    this.deleteNote = this.deleteNote.bind(this);\r\n  }\r\n\r\n  addNote(input) {\r\n    const tmpNote = {\r\n      note: input,\r\n      //id: this.state.notesAirTable.length + 1\r\n      id: this.state.ids\r\n    };\r\n\r\n    notesData.unshift(tmpNote);\r\n    this.setState({\r\n      notes: notesData,\r\n      ids: this.state.ids + 1\r\n    });\r\n    //\r\n    // axios.post(\r\n    //   \"https://api.airtable.com/v0/appqAletHu3mYpp1h/Notes?api_key=__PUT API KEY HERE__\",\r\n    //   {\r\n    //     fields: {\r\n    //       note: tmpNote.note,\r\n    //       id: tmpNote.id\r\n    //     }\r\n    //   }\r\n    // );\r\n    //\r\n    // this.refreshData();\r\n  }\r\n\r\n  searchIndex(element, id) {\r\n    return element === id;\r\n  }\r\n  deleteNote(index) {\r\n    notesData.splice(index, 1);\r\n    this.setState({\r\n      notes: notesData\r\n    });\r\n\r\n    //AIR TABLE SAMPLE\r\n    // const url =\r\n    //   \"https://api.airtable.com/v0/appqAletHu3mYpp1h/Notes/\" +\r\n    //   id +\r\n    //   \"?api_key=__PUT API KEY HERE__\";\r\n    // axios.delete(url);\r\n    //\r\n    // this.refreshData();\r\n  }\r\n  // ONLY FOR AIRTABLE CONECTION\r\n  // refreshData() {\r\n  //   //Fetch notes from AirTable\r\n  //   setTimeout(() => {\r\n  //     fetch(\r\n  //       \"https://api.airtable.com/v0/appqAletHu3mYpp1h/Notes?api_key=__PUT API KEY HERE__&sort%5B0%5D%5Bfield%5D=time&sort%5B0%5D%5Bdirection%5D=desc\"\r\n  //     )\r\n  //       .then(response => response.json())\r\n  //       .then(data => {\r\n  //         this.setState({\r\n  //           notesAirTable: data.records\r\n  //         });\r\n  //       })\r\n  //       .catch(error => alert(error));\r\n  //   }, 100);\r\n  // }\r\n\r\n  componentDidMount() {\r\n    //this.refreshData();\r\n  }\r\n\r\n  render() {\r\n    const newNotesReact = this.state.notes.map(note => (\r\n      <Card\r\n        id={note.id}\r\n        index={this.state.notes.indexOf(note)}\r\n        text={note.note}\r\n        deleteNote={this.deleteNote}\r\n        addNote={this.addNote}\r\n      />\r\n    ));\r\n\r\n    //Map notes from Airtable\r\n    //\r\n    // const newNotes = this.state.notesAirTable.map(note => (\r\n    //   <Card\r\n    //     id={note.id}\r\n    //     text={note.fields.note}\r\n    //     deleteNote={this.deleteNote}\r\n    //     addNote={this.addNote}\r\n    //   />\r\n    // ));\r\n\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"mygrid\">\r\n          <MyForm addNote={this.addNote} />\r\n          {newNotesReact}\r\n          {/*\r\n<Counter />  {noteComponents}\r\n          <Card text={this.state.note} />\r\n                <Conditional note=\"cośtam2\" />*/}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}