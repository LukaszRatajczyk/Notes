{"version":3,"sources":["../../../NaukaReact/notes/src/Card.js","../../../NaukaReact/notes/src/MyForm.js","../../../NaukaReact/notes/src/Header.js","../../../NaukaReact/notes/src/Components/notesData.js","../../../NaukaReact/notes/src/App.js","../../../NaukaReact/notes/src/serviceWorker.js","../../../NaukaReact/notes/src/index.js"],"names":["Card","props","react_default","a","createElement","className","style","display","text","MyForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","SaveText","bind","assertThisInitialized","e","target","value","addNote","id","name","rows","cols","placeholder","onBlur","React","Component","Header","src","height","marginTop","notesData","App","state","notes","input","tmpNote","length","unshift","setState","noteComponents","map","note","src_Card","key","src_Header","src_MyForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAgBeA,MAbf,SAAcC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAU,OACVC,MAAO,CACLC,SAAUN,EAAMO,MAAQ,SAG1BN,EAAAC,EAAAC,cAAA,SAAIH,EAAMO,QCmBDC,cA1Bb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,SAAWP,EAAKO,SAASC,KAAdP,OAAAQ,EAAA,EAAAR,CAAAD,IAFJA,wEAILU,GACHA,EAAEC,OAAOC,QACXT,KAAKZ,MAAMsB,QAAQH,EAAEC,OAAOC,OAC5BF,EAAEC,OAAOC,MAAQ,qCAInB,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,YACEoB,GAAG,YACHC,KAAK,OACLC,KAAK,IACLC,KAAK,KACLC,YAAY,wBACZC,OAAQhB,KAAKI,mBApBFa,IAAMC,WCaZC,MAbf,WAKE,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAK6B,IAAI,0CAA0C3B,MANrC,CAChB4B,OAAQ,OACRC,UAAW,UAKTjC,EAAAC,EAAAC,cAAA,qBCTSgC,EAFG,GCmDHC,cAzCb,SAAAA,IAAc,IAAA3B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACZ3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,QACKyB,MAAQ,CACXC,MAAOH,GAET1B,EAAKa,QAAUb,EAAKa,QAAQL,KAAbP,OAAAQ,EAAA,EAAAR,CAAAD,IALHA,uEAQN8B,GAEN,IAAMC,EAAU,CACdjB,GAAIY,EAAUM,OAAS,EACvBlC,KAAMgC,GAERJ,EAAUO,QAAQF,GAClB5B,KAAK+B,SAAS,CACZL,MAAOH,uCAIAZ,EAAIhB,qCAEb,IAAMqC,EAAiBhC,KAAKyB,MAAMC,MAAMO,IAAI,SAAAC,GAAI,OAC9C7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAMC,IAAKF,EAAKvB,GAAIhB,KAAMuC,EAAKvC,SAGjC,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAC+C,EAAD,CAAQ5B,QAASV,KAAKU,UACrBsB,WAhCOd,aCGEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6ebcc152.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      style={{\r\n        display: !props.text && \"none\"\r\n      }}\r\n    >\r\n      <p>{props.text}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass MyForm extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.SaveText = this.SaveText.bind(this);\r\n  }\r\n  SaveText(e) {\r\n    if (e.target.value) {\r\n      this.props.addNote(e.target.value);\r\n      e.target.value = \"\";\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <textarea\r\n          id=\"inputarea\"\r\n          name=\"name\"\r\n          rows=\"8\"\r\n          cols=\"40\"\r\n          placeholder=\"Dodaj notatkę...\"\r\n          onBlur={this.SaveText}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyForm;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction Header() {\r\n  const logostyle = {\r\n    height: \"16px\",\r\n    marginTop: \"24px\"\r\n  };\r\n  return (\r\n    <div className=\"myheader\">\r\n      <img src=\"https://ahola.pl/style/ahola_wave_y.svg\" style={logostyle} />\r\n      <h2>Notes</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","const notesData = [];\r\n\r\nexport default notesData;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Card from \"./Card\";\nimport MyForm from \"./MyForm\";\nimport Header from \"./Header\";\n//import Counter from \"./Components/Counter\";\n//import Conditional from \"./Components/Conditional\";\nimport notesData from \"./Components/notesData\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      notes: notesData\n    };\n    this.addNote = this.addNote.bind(this);\n  }\n\n  addNote(input) {\n    //  this.setState({      note: input    });\n    const tmpNote = {\n      id: notesData.length + 1,\n      text: input\n    };\n    notesData.unshift(tmpNote);\n    this.setState({\n      notes: notesData\n    });\n  }\n  // Dopis metodę edytującą bieżacą notatke\n  updateNote(id, text) {}\n  render() {\n    const noteComponents = this.state.notes.map(note => (\n      <Card key={note.id} text={note.text} />\n    ));\n\n    return (\n      <div>\n        <Header />\n        <div className=\"mygrid\">\n          <MyForm addNote={this.addNote} />\n          {noteComponents}\n          {/*<Counter />\n          <Card text={this.state.note} />\n                <Conditional note=\"cośtam2\" />*/}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}